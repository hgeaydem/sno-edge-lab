---
# vim: set ft=ansible:

- name: Add Bastion to Inventory
  hosts: localhost
  tasks:

    - name: Dynamically add new Bastion VM to the inventory
      add_host:
        ansible_ssh_user: root
        ansible_ssh_host: "{{ prebuilt_ip }}"
        ansible_ssh_port: 8000
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        hostname: 192.168.123.100
        groups: bastion
      when: baremetal_provider == "prebuilt"

    - name: Dynamically add new Bastion VM to the inventory
      add_host:
        ansible_ssh_user: root
        ansible_ssh_host: "{{ instance_ip }}"
        ansible_ssh_port: 8000
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        hostname: 192.168.123.100
        groups: bastion
      when: baremetal_provider == "packet"   

- name: Configure Bastion machine
  gather_facts: true
  remote_user: root
  hosts: target
  tasks:

    - name: Make sure Bastion VM isn't running
      virt:
        name: ocp4-bastion
        state: shutdown

    - name: Create temporary users SSH public key file
      ansible.builtin.lineinfile:
        path: /tmp/user-key.pub
        line: "{{ ssh_key }}"
        create: yes

    - name: Inject users SSH key into Bastion VM for Ansible
      ansible.builtin.command: >
        virt-customize -a /var/lib/libvirt/images/ocp4-bastion.qcow2 --selinux-relabel
        --ssh-inject root:file:/root/.ssh/id_rsa.pub
        --ssh-inject root:file:/tmp/user-key.pub
      register: result
      until: result is succeeded
      retries: 3
      delay: 30

    - name: Start Bastion virtual machine
      virt:
        name: ocp4-bastion
        state: running

- name: Deploy Bastion machine
  gather_facts: false
  hosts: bastion
  tasks:

    - name: Wait for Bastion machine to start
      wait_for_connection:
        timeout: 120
      register: result
      until: result is succeeded
      retries: 3
      delay: 30

    - name: Grow root disk
      ansible.builtin.command: growpart /dev/vda 1
      ignore_errors: true

    - name: Resize partition to fill disk
      ansible.builtin.command: xfs_growfs /

    - name: Set Bastion hostname
      ansible.builtin.hostname:
        name: ocp4-bastion.aio.example.com

    - name: Install required base packages
      dnf:
        name:
          - qemu-img
          - jq
          - git
          - httpd
          - squid
          - dhcp-server
          - xinetd
          - net-tools
          - nano
          - bind
          - bind-utils
          - haproxy
          - wget
          - syslinux
          - libvirt-libs
          - tftp-server
          - syslinux-tftpboot
          - firewalld
          - python3-virtualenv
          - podman
        state: latest

    - name: Upgrade all packages
      dnf:
        name: "*"
        state: latest

    - name: Create SSH keypair
      openssh_keypair:
        path: "~/.ssh/id_rsa"
        type: rsa
        size: 4096
        state: present
        force: no

    - name: Enable Firewalld
      ansible.builtin.systemd:
        name: firewalld
        enabled: yes
        state: started

    - name: Enable Bastion services in firewall
      firewalld:
        permanent: yes
        state: enabled
        service: "{{ item }}"
      loop:
        - dhcp
        - dns
        - http
        - https
        - squid
        - nfs3
        - mountd
        - rpc-bind
        - nfs

    - name: Enable TFTP in firewall for UPI
      firewalld:
        permanent: yes
        state: enabled
        service: "tftp"
      when: deploy_type == "upi"

    - name: Enable extra Bastion ports in firewall
      firewalld:
        permanent: yes
        state: enabled
        port: "{{ item }}"
      loop:
        - "6443/tcp"
        - "8443/tcp"
        - "9001/tcp"
        - "22623/tcp"
        - "81/tcp"

    - name: Reload Firewalld
      ansible.builtin.command: firewall-cmd --reload
      register: firewalld_return
      failed_when: firewalld_return.rc > 0

    - name: Make NFS PV and TFTPboot directories
      file:
        path: "{{ item }}"
        state: directory
        mode: 0777
        recurse: yes
      loop:
        - "/nfs/pv1"
        - "/nfs/pv2"
        - "/nfs/pv3"
        - "/nfs/pv4"
        - "/nfs/pv5"
        - "/var/lib/tftpboot/pxelinux/pxelinux.cfg/"

    - name: Setting up NFS config
      ansible.builtin.lineinfile:
        path: /etc/exports
        line: /nfs *(rw,no_root_squash)
        create: yes

    - name: Setting up HTTPD config
      ansible.builtin.lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^Listen '
        insertafter: '^#Listen '
        line: Listen 81

    - name: Setting up TFTP configs
      ansible.builtin.copy:
        remote_src: yes
        src: "{{ item }}"
        dest: /var/lib/tftpboot/pxelinux
        mode: 0755
        setype: "_default"
      loop:
        - "/tftpboot/pxelinux.0"
        - "/tftpboot/ldlinux.c32"
        - "/tftpboot/vesamenu.c32"
      when: deploy_type == "upi"

    - name: Copy over DHCP config file for SNO
      ansible.builtin.copy:
        src: ../conf/services/dhcpd-sno.conf
        dest: /etc/dhcp/dhcpd.conf
        mode: 0644
      when: deploy_type == "sno-iso"

    - name: Copy over Squid config file
      ansible.builtin.copy:
        src: ../conf/services/squid.conf
        dest: /etc/squid/squid.conf
        mode: 0644

    - name: Copy over named config file
      ansible.builtin.copy:
        src: ../conf/services/named.conf for UPI/IPI
        dest: /etc/named.conf
        mode: 0644
      when: deploy_type == "upi" or deploy_type == "ipi"

    - name: Copy over named config file for SNO
      ansible.builtin.copy:
        src: ../conf/services/named-sno.conf
        dest: /etc/named.conf
        mode: 0644
      when: deploy_type == "sno-iso"

    - name: Copy over DNS zone files for SNO
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /var/named
        mode: 0644
      loop:
        - "../conf/services/rhacm.example.com.db"
        - "../conf/services/edge1.example.com.db"
        - "../conf/services/edge2.example.com.db"
        - "../conf/services/edge3.example.com.db"
        - "../conf/services/edge4.example.com.db"
        - "../conf/services/123.168.192-sno.db"
      when: deploy_type == "sno-iso"

    - name: Rename DNS zone file for IPI
      ansible.builtin.command: mv /var/named/123.168.192-sno.db /var/named/123.168.192.db
      when: deploy_type == "sno-iso"  

    - name: Make sure DHCPD leases file exists
      ansible.builtin.file:
        path: /var/lib/dhcpd/dhcpd.leases
        state: touch

    - name: Enable Bastion Services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - httpd
        - named
        - squid
        - dhcpd
        - rpcbind
        - nfs-server

    # https://github.com/ansible/ansible/issues/46744
    - name: Enable TFTP manually for UPI
      ansible.builtin.command: systemctl enable --now tftp
      when: deploy_type == "upi"

    - name: Install IPI-specific base packages
      dnf:
        name:
          - libvirt
          - qemu-kvm
          - mkisofs
          - python3-devel
          - jq
          - ipmitool
        state: latest
      when: deploy_type == "ipi"

    - name: Enable Libvirtd for IPI
      ansible.builtin.systemd:
        name: libvirtd
        enabled: yes
        state: started
      when: deploy_type == "ipi"

    - name: Configure Libvirt Pool for IPI
      ansible.builtin.command: virsh pool-define-as --name default --type dir --target /var/lib/libvirt/images
      register: virsh_pool
      failed_when: virsh_pool.rc > 1
      when: deploy_type == "ipi"

    - name: Enable Libvirt Pool Autostart for IPI
      ansible.builtin.command: virsh pool-autostart default
      when: deploy_type == "ipi"

    - name: Configure Provisioning Bridge for IPI
      nmcli:
        type: bridge
        conn_name: provisioning
        ip4: 172.22.0.1/24
        gw4: 172.22.0.254
        state: present
      when: deploy_type == "ipi"

    - name: Add eth1 to Provisioning Bridge for IPI
      nmcli:
        type: bridge-slave
        conn_name: eth1
        ifname: eth1
        hairpin: false
        master: provisioning
        state: present
      when: deploy_type == "ipi"

    - name: Configure Baremetal Bridge for IPI
      nmcli:
        type: bridge
        conn_name: baremetal
        ip4: 192.168.123.100/24
        gw4: 192.168.123.1
        state: present
      when: deploy_type == "ipi"

    - name: Add eth0 to Baremetal Bridge for IPI
      nmcli:
        type: bridge-slave
        conn_name: eth0
        ifname: eth0
        hairpin: false
        master: baremetal
        state: present
      when: deploy_type == "ipi"

    - name: Ensure that provisioning bridge is never default-gw
      ansible.builtin.command: nmcli con modify provisioning ipv4.never-default yes
      when: deploy_type == "ipi"

    - name: Remove hardcoded ifcfg-eth0 for IPI
      ansible.builtin.file:
        path: /etc/sysconfig/network-scripts/ifcfg-eth0
        state: absent
      when: deploy_type == "ipi"

    - name: Rebooting Bastion VM
      reboot:
        reboot_timeout: 600

    - name: Get RHCOS version to use
      set_fact:
        subversion: "{{ ocp_version.split('latest-')[1] if ('latest' in ocp_version) else ocp_version.split('.')[:2]|join('.') }}"

    - name: Download OpenShift Client
      ansible.builtin.get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-client-linux.tar.gz
        dest: /root
        mode: 0644

    - name: Download OpenShift Installer
      ansible.builtin.get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-install-linux.tar.gz
        dest: /root
        mode: 0644

    - name: Download RHCOS RAMDISK
      ansible.builtin.get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/{{ subversion }}/latest/rhcos-live-initramfs.x86_64.img
        dest: /var/www/html
        mode: 0644
      when: deploy_type == "upi"

    - name: Download RHCOS Kernel
      ansible.builtin.get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/{{ subversion }}/latest/rhcos-live-kernel-x86_64
        dest: /var/www/html
        mode: 0644
      when: deploy_type == "upi"

    - name: Download RHCOS RAW Disk image
      ansible.builtin.get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/{{ subversion }}/latest/rhcos-metal.x86_64.raw.gz
        dest: /var/www/html
        mode: 0644
      when: deploy_type == "upi"

    - name: Download RHCOS Live RootFS
      ansible.builtin.get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/{{ subversion }}/latest/rhcos-live-rootfs.x86_64.img
        dest: /var/www/html
        mode: 0644
      when: deploy_type == "upi"

    - name: Unpack OpenShift Client & Installer
      ansible.builtin.unarchive:
        remote_src: yes
        src: "{{ item }}"
        dest: /usr/bin
      loop:
        - "/root/openshift-install-linux.tar.gz"
        - "/root/openshift-client-linux.tar.gz"

    - name: Remove OpenShift client and installer tarballs
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/root/openshift-install-linux.tar.gz"
        - "/root/openshift-client-linux.tar.gz"

    - name: Rename RHCOS files to simplify filenames
      ansible.builtin.command: "{{ item }}"
      loop:
        - "mv /var/www/html/rhcos-metal.x86_64.raw.gz /var/www/html/rhcos.raw.gz"
        - "mv /var/www/html/rhcos-live-kernel-x86_64 /var/www/html/rhcos.kernel"
        - "mv /var/www/html/rhcos-live-initramfs.x86_64.img /var/www/html/rhcos.initramfs"
        - "mv /var/www/html/rhcos-live-rootfs.x86_64.img /var/www/html/rhcos.rootfs"
      when: deploy_type == "upi"

    - name: Reset permissions for /var/www/html
      ansible.builtin.file:
        path: /var/www/html
        recurse: yes
        mode: '0755'
        setype: _default
