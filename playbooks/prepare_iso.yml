- name: Prepare SNO install ISO
  gather_facts: true
  remote_user: root
  hosts: target
  tasks:

    - name: Check if live ISO disk image already exists
      stat:
        path: /root/lab/base.iso
      register: base_result

    - name: Check if embedded ISO disk image already exists
      stat:
        path: /var/lib/libvirt/images/sno-edge2/embedded.iso
      register: embed_result

    - name: Downloading live ISO
      ansible.builtin.get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/latest/latest/rhcos-4.8.2-x86_64-live.x86_64.iso
        dest: "/root/lab/base.iso"
        mode: 0644
      when: not base_result.stat.exists

    - name: Copy live ISO to edge directory
      ansible.builtin.copy:
        remote_src: yes
        src: /root/lab/base.iso
        dest: "/root/sno-{{ item }}/base.iso"
      loop:
        - rhacm
        - edge1
        - edge2
      when: not embed_result.stat.exists

    - name: Copy install-config over to bastion for SNO
      ansible.builtin.copy:
        src: ../conf/k8s/install-config-sno.yaml
        dest: /root/lab/install-config.yaml

    - name: Grab contents of Bastions SSH public key
      ansible.builtin.command: cat /root/.ssh/id_rsa.pub
      register: bastion_ssh

    - name: Insert ssh pub key into install-config
      ansible.builtin.lineinfile:
        path: /root/lab/install-config.yaml
        regexp: '^sshKey: '
        insertafter: '^#sshKey: '
        line: "sshKey: '{{ bastion_ssh.stdout }}'"

    - name: Insert pull secret into install-config
      ansible.builtin.lineinfile:
        path: /root/lab/install-config.yaml
        regexp: '^pullSecret: '
        insertafter: '^#pullSecret: '
        line: "pullSecret: '{{ pull_secret }}'"

    - name: Copy lab install-config to SNO install directory
      ansible.builtin.copy:
        remote_src: yes
        src: /root/lab/install-config.yaml
        dest: /root/sno-{{ item }}/install-config.yaml
      loop:
        - rhacm
        - edge1
        - edge2
      when: not embed_result.stat.exists

    - name: Update Cluster name in install-config
      ansible.builtin.replace:
        path: /root/sno-{{ item }}/install-config.yaml
        regexp: 'CLUSTER_NAME'
        replace: "{{ item }}"
      loop:
        - rhacm
        - edge1
        - edge2
      when: not embed_result.stat.exists

    - name: Change Installation disk reference in install-config
      ansible.builtin.replace:
        path: /root/sno-{{ item }}/install-config.yaml
        regexp: 'INSTALLATION_DISK'
        replace: "/dev/vda"
      loop:
        - rhacm
        - edge1
        - edge2
      when: not embed_result.stat.exists

    - name: Generating ignition files
      ansible.builtin.shell: "openshift-install create single-node-ignition-config --dir=/root/sno-{{ item }}"
      loop:
        - rhacm
        - edge1
        - edge2 
      when: not embed_result.stat.exists

    - name: Generating install manifests
      ansible.builtin.shell: "openshift-install create manifests --dir=/root/sno-{{ item }}"
      loop:
        - rhacm
        - edge1
        - edge2
      when: not embed_result.stat.exists

    - name: Embed ignition in install ISO
      containers.podman.podman_container:
        name: embed_ignition_{{ item }}
        state: present
        image: quay.io/coreos/coreos-installer:release
        privileged: yes
        volume:
          - "/dev:/dev"
          - "/run/udev:/run/udev"
          - "/root/sno-{{ item }}:/data:Z"
          - "/root/sno-{{ item }}:/ignition_data:Z"
          - "/var/lib/libvirt/images/sno-{{ item }}:/output_data:Z"
        workdir: "/data"
        command: "iso ignition embed /data/base.iso --force --ignition-file /ignition_data/bootstrap-in-place-for-live-iso.ign --output /output_data/embedded.iso"
      loop:
        - rhacm
        - edge1
        - edge2
      when: not embed_result.stat.exists

